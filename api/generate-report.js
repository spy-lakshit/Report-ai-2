// Enhanced AI Report Generator API - Matches Perfect Offline Version
// Generates reports exactly like test-lakshay-simple-offline.js with dynamic content and accurate word counts

const { Document, Packer, Paragraph, TextRun, AlignmentType, PageBreak, Header, Footer, PageNumber, NumberFormat, TabStopPosition, TabStopType, LeaderType } = require('docx');

module.exports = async (req, res) => {
    // Enable CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }
    
    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method not allowed' });
    }
    
    try {
        const config = req.body;
        
        // Validate required fields
        const required = ['studentName', 'studentId', 'course', 'semester', 'institution', 'supervisor', 'projectTitle', 'projectDescription', 'reportType'];
        
        for (const field of required) {
            if (!config[field] || config[field].trim() === '') {
                return res.status(400).json({
                    error: `Missing required field: ${field}`
                });
            }
        }
        
        console.log(`🎯 Generating enhanced report for: ${config.projectTitle}`);
        
        // Generate the report using the perfect offline logic
        const reportBuffer = await createPerfectDocx(config);
        
        // Create filename
        const filename = `${config.studentName.replace(/\s+/g, '_')}_${config.projectTitle.replace(/[^a-zA-Z0-9]/g, '_')}_Report.docx`;
        
        // Set headers for file download
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.setHeader('Content-Length', reportBuffer.length);
        
        // Send the file
        res.send(reportBuffer);
        
    } catch (error) {
        console.error('❌ Report generation error:', error);
        res.status(500).json({ 
            error: 'Failed to generate report',
            details: error.message 
        });
    }
};

// Progress tracking storage
const progressTracking = new Map();

// Health check
app.get('/api/health', (req, res) => {
    res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
        message: 'AI Report Generator is running!'
    });
});

// Progress endpoint
app.get('/api/progress/:sessionId', (req, res) => {
    const sessionId = req.params.sessionId;
    const progress = progressTracking.get(sessionId) || {
        progress: 0,
        status: 'Starting...',
        timeRemaining: 300
    };
    res.json(progress);
});

// Function to call Gemini API with user's API key
async function generateContent(prompt, apiKey, retries = 2) {
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key=${apiKey}`;

    const requestBody = {
        contents: [{
            parts: [{
                text: prompt
            }]
        }],
        generationConfig: {
            temperature: 0.7,
            maxOutputTokens: 8000,
            topP: 0.8,
            topK: 40
        }
    };

    for (let attempt = 1; attempt <= retries; attempt++) {
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(requestBody)
            });

            const responseText = await response.text();
            
            if (responseText.startsWith('<') || responseText.includes('<!DOCTYPE')) {
                throw new Error('API returned HTML instead of JSON - likely rate limited');
            }

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${responseText}`);
            }

            const data = JSON.parse(responseText);

            if (!data.candidates || data.candidates.length === 0) {
                throw new Error('No content generated by Gemini API');
            }

            const candidate = data.candidates[0];
            const content = candidate.content?.parts?.[0]?.text || '';

            if (!content.trim()) {
                throw new Error('Empty content generated');
            }

            return {
                content: content.trim(),
                wordCount: content.trim().split(/\s+/).length,
                finishReason: candidate.finishReason
            };

        } catch (error) {
            console.error(`Attempt ${attempt} failed:`, error.message);

            if (attempt === retries) {
                return generateFallbackContent(prompt);
            }

            await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));
        }
    }
}

// Generate fallback content when API fails
function generateFallbackContent(prompt) {
    const sectionType = prompt.toLowerCase();
    
    if (sectionType.includes('introduction')) {
        return {
            content: `1.1 Background and Motivation\n\nThis project addresses the growing need for innovative solutions in modern technology. The motivation stems from identifying gaps in current systems and the potential for improvement through advanced methodologies.\n\n1.2 Problem Statement\n\nThe primary challenge lies in developing efficient and scalable solutions that meet contemporary requirements while maintaining reliability and performance standards.\n\n1.3 Objectives\n\nThe main objectives include designing a comprehensive system, implementing robust functionality, ensuring optimal performance, and providing user-friendly interfaces that enhance overall experience.\n\n1.4 Scope and Limitations\n\nThis project focuses on core functionality while acknowledging certain limitations in scope due to time and resource constraints.\n\n1.5 Report Organization\n\nThis report is structured to provide a comprehensive overview of the project development process, from initial planning to final implementation.`,
            wordCount: 150,
            finishReason: 'fallback'
        };
    } else {
        return {
            content: `This section provides detailed information about the project implementation, covering all essential aspects of the development process. The content includes comprehensive analysis, methodology, and results that demonstrate the effectiveness of the proposed solution.`,
            wordCount: 40,
            finishReason: 'fallback'
        };
    }
}

// Update progress helper
function updateProgress(sessionId, progress, status, timeRemaining = null) {
    const progressData = { progress, status, timestamp: new Date().toISOString() };
    if (timeRemaining !== null) {
        progressData.timeRemaining = timeRemaining;
    }
    console.log(`📊 Progress: ${progress}% - ${status}`);
}

// Function to create perfectly formatted paragraphs
function createFormattedParagraphs(text) {
    const paragraphs = [];
    const lines = text.split('\n').filter(line => line.trim());

    for (const line of lines) {
        const trimmedLine = line.trim();

        if (!trimmedLine) continue;

        // Skip any chapter headings that might be generated by AI
        if (trimmedLine.match(/^#+\s*Chapter \d+:/i) || trimmedLine.match(/^Chapter \d+:/i)) {
            continue; // Skip this line completely
        }

        // Main heading (e.g., 1.1 Background) or Front Matter heading or Sub-point headings (e.g., 7.3 Limitations)
        if (trimmedLine.match(/^\d+\.\d+/) || ['TRAINING CERTIFICATE', 'ACKNOWLEDGEMENT', 'ABSTRACT', 'REFERENCES', 'LIST OF CONTENTS'].includes(trimmedLine)) {
            const isFrontMatterHeading = ['TRAINING CERTIFICATE', 'ACKNOWLEDGEMENT', 'ABSTRACT', 'REFERENCES', 'LIST OF CONTENTS'].includes(trimmedLine);

            paragraphs.push(
                new Paragraph({
                    children: [
                        new TextRun({
                            text: trimmedLine,
                            bold: true,
                            size: 28, // 14pt bold
                            font: "Times New Roman"
                        })
                    ],
                    alignment: isFrontMatterHeading ? AlignmentType.CENTER : AlignmentType.LEFT,
                    spacing: {
                        before: isFrontMatterHeading ? 480 : 360,
                        after: 240,
                        line: 360,
                        lineRule: "auto"
                    },
                    indent: { left: 0, right: 0 }
                })
            );
        }
        // Regular paragraph - 12pt normal text
        else {
            // Check for Reference format (Simple numbered list with URLs)
            const isReference = trimmedLine.match(/^\d+\.\s*https?:\/\//);

            paragraphs.push(
                new Paragraph({
                    children: [
                        new TextRun({
                            text: trimmedLine,
                            bold: false,
                            size: 24, // 12pt normal text
                            font: "Times New Roman"
                        })
                    ],
                    alignment: isReference ? AlignmentType.LEFT : AlignmentType.JUSTIFIED,
                    spacing: {
                        before: 0,
                        after: 120, // Normal spacing
                        line: 360, // 1.5 line spacing
                        lineRule: "auto"
                    },
                    indent: isReference ? { left: 360 } : { left: 0, right: 0 } // Small indent for numbered references
                })
            );
        }
    }

    return paragraphs;
}

// Function to create professional cover page
function createCoverPage(details) {
    return [
        // Institution name at top
        new Paragraph({
            children: [
                new TextRun({
                    text: details.institution.toUpperCase(),
                    bold: true,
                    size: 32, // 16pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 720, after: 240 }
        }),

        // Department
        new Paragraph({
            children: [
                new TextRun({
                    text: details.department || `Department of ${details.course}`,
                    bold: true,
                    size: 28, // 14pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 720 }
        }),

        // Project title (main heading)
        new Paragraph({
            children: [
                new TextRun({
                    text: details.projectTitle.toUpperCase(),
                    bold: true,
                    size: 36, // 18pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 1440, after: 1440 }
        }),

        // Report type
        new Paragraph({
            children: [
                new TextRun({
                    text: `A ${details.reportType.toUpperCase()} REPORT`,
                    bold: true,
                    size: 28, // 14pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 720 }
        }),

        // Submitted by
        new Paragraph({
            children: [
                new TextRun({
                    text: "Submitted by:",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 120 }
        }),

        // Student name
        new Paragraph({
            children: [
                new TextRun({
                    text: details.studentName,
                    bold: true,
                    size: 28, // 14pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 120 }
        }),

        // Student ID
        new Paragraph({
            children: [
                new TextRun({
                    text: `Student ID: ${details.studentId}`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 240 }
        }),

        // Course
        new Paragraph({
            children: [
                new TextRun({
                    text: details.course,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 120 }
        }),

        // Semester
        new Paragraph({
            children: [
                new TextRun({
                    text: details.semester,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 720 }
        }),

        // Supervisor
        new Paragraph({
            children: [
                new TextRun({
                    text: "Under the guidance of:",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 120 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: details.supervisor,
                    bold: true,
                    size: 28, // 14pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 720 }
        }),

        // Year
        new Paragraph({
            children: [
                new TextRun({
                    text: new Date().getFullYear().toString(),
                    bold: true,
                    size: 28, // 14pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 720 }
        })
    ];
}

// Function to create Training Certificate page
function createCertificatePage(details) {
    return [
        new Paragraph({
            children: [
                new TextRun({
                    text: "TRAINING CERTIFICATE",
                    bold: true,
                    size: 28, // 14pt bold
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 480, after: 480 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `This is to certify that ${details.studentName} (Student ID: ${details.studentId}) has successfully completed the ${details.reportType} work on "${details.projectTitle}" as part of the curriculum for ${details.course} at ${details.institution}.`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `The work was carried out under the supervision of ${details.supervisor} during the academic year ${new Date().getFullYear()}.`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 720, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "Date: _______________",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.LEFT,
            spacing: { before: 720, after: 360 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "Signature of Supervisor",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.RIGHT,
            spacing: { before: 720 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: details.supervisor,
                    bold: true,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.RIGHT,
            spacing: { after: 240 }
        })
    ];
}

// Function to create Acknowledgement page
function createAcknowledgementPage(details) {
    return [
        new Paragraph({
            children: [
                new TextRun({
                    text: "ACKNOWLEDGEMENT",
                    bold: true,
                    size: 28, // 14pt bold
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 480, after: 480 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `I would like to express my sincere gratitude to my supervisor, ${details.supervisor}, for his valuable guidance, continuous support, and encouragement throughout the development of this ${details.reportType}. His expertise and insights have been instrumental in shaping this work.`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `I am also thankful to the faculty members of ${details.department || `Department of ${details.course}`}, ${details.institution}, for their support and for providing the necessary resources and facilities required for this work.`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "I would also like to thank my family and friends for their constant encouragement and moral support throughout this journey.",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 720, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: details.studentName,
                    bold: true,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.RIGHT,
            spacing: { before: 720 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: details.studentId,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.RIGHT,
            spacing: { after: 240 }
        })
    ];
}

// Function to create Abstract page
function createAbstractPage(details) {
    return [
        new Paragraph({
            children: [
                new TextRun({
                    text: "ABSTRACT",
                    bold: true,
                    size: 28, // 14pt bold
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 480, after: 480 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `This ${details.reportType} presents the comprehensive study and implementation of "${details.projectTitle}". ${details.projectDescription}`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "The methodology involves systematic analysis, design, implementation, and evaluation of the proposed solution. The work demonstrates practical application of modern technologies and methodologies in addressing real-world challenges.",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "Key contributions include the development of a robust and scalable solution that addresses identified problems and requirements. The implementation demonstrates effective use of current technologies and best practices in software development.",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "The results show significant improvements in efficiency, performance, and user experience compared to existing solutions. The project successfully meets all specified requirements and provides a solid foundation for future enhancements.",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 720, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `Keywords: ${details.course}, Software Development, System Design, Implementation, Testing, ${details.projectTitle}`,
                    bold: true,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.LEFT,
            spacing: { before: 360 }
        })
    ];
}

// Function to create Table of Contents page
function createTableOfContentsPage(config) {
    const { chapters } = generateDynamicChapterTitles(config.projectTitle, config.projectDescription);
    const targetWords = parseInt(config.targetWordCount) || 15000;
    const contents = [
        new Paragraph({
            children: [
                new TextRun({
                    text: "TABLE OF CONTENTS",
                    bold: true,
                    size: 28, // 14pt bold
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 480, after: 480 }
        })
    ];

    // Set up the custom tab stop for the page number aligned to the right margin
    const tabStops = [{
        type: TabStopType.RIGHT,
        position: 9000, // Right align at 6.25 inches
        leader: LeaderType.DOT // Dots fill the space
    }];

    // Dynamic TOC structure based on word count and chapters
    const tocItems = [
        { text: "Training Certificate", page: "i", bold: false, indent: 0 },
        { text: "Acknowledgement", page: "ii", bold: false, indent: 0 },
        { text: "Abstract", page: "iii", bold: false, indent: 0 },
        { text: "Table of Contents", page: "iv", bold: false, indent: 0 }
    ];

    // Add main chapters dynamically
    let pageStart = 1;
    const pagesPerChapter = targetWords >= 25000 ? 12 : targetWords >= 20000 ? 10 : 8;

    chapters.forEach((chapter, index) => {
        const pageEnd = pageStart + pagesPerChapter - 1;
        tocItems.push({
            text: `Chapter ${index + 1}: ${chapter}`,
            page: `${pageStart}-${pageEnd}`,
            bold: true,
            indent: 0
        });
        pageStart = pageEnd + 1;
    });

    // Add additional chapters for higher word counts
    if (targetWords >= 20000) {
        const pageEnd = pageStart + pagesPerChapter - 1;
        tocItems.push({
            text: `Chapter 7: Advanced Implementation Details`,
            page: `${pageStart}-${pageEnd}`,
            bold: true,
            indent: 0
        });
        pageStart = pageEnd + 1;

        if (targetWords >= 25000) {
            const pageEnd2 = pageStart + pagesPerChapter - 1;
            tocItems.push({
                text: `Chapter 8: Comparative Analysis and Benchmarking`,
                page: `${pageStart}-${pageEnd2}`,
                bold: true,
                indent: 0
            });
            pageStart = pageEnd2 + 1;

            const pageEnd3 = pageStart + pagesPerChapter - 1;
            tocItems.push({
                text: `Chapter 9: Future Scope and Recommendations`,
                page: `${pageStart}-${pageEnd3}`,
                bold: true,
                indent: 0
            });
            pageStart = pageEnd3 + 1;
        }
    }

    // Add references
    tocItems.push({
        text: "References",
        page: pageStart.toString(),
        bold: true,
        indent: 0
    });

    for (const item of tocItems) {
        contents.push(
            new Paragraph({
                children: [
                    new TextRun({
                        text: item.text,
                        bold: item.bold,
                        size: 24, // 12pt
                        font: "Times New Roman"
                    }),
                    new TextRun({
                        text: '\t', // Tab character to trigger the tab stop
                        size: 24,
                        font: "Times New Roman"
                    }),
                    new TextRun({
                        text: item.page,
                        bold: item.bold,
                        size: 24,
                        font: "Times New Roman"
                    })
                ],
                alignment: AlignmentType.LEFT,
                spacing: {
                    before: 0,
                    after: 120, // 6pt after
                    line: 360,  // 1.5 line spacing
                    lineRule: "auto"
                },
                indent: { left: item.indent },
                tabStops: tabStops
            })
        );
    }

    return contents;
}

// Function to create footer with page numbering
function createFooter() {
    return new Footer({
        children: [
            new Paragraph({
                children: [
                    new TextRun({
                        children: [PageNumber.CURRENT],
                        size: 24, // 12pt
                        font: "Times New Roman"
                    }),
                ],
                alignment: AlignmentType.RIGHT, // Page number on the bottom right
                spacing: { before: 0 }
            }),
        ],
    });
}

// Function to generate dynamic chapter titles based on project topic
function generateDynamicChapterTitles(projectTitle, projectDescription) {
    // Extract key topics from project title and description
    const title = projectTitle.toLowerCase();
    const description = projectDescription.toLowerCase();

    // Determine the main technology/domain
    let mainTopic = "System Development";
    let chapters = [];

    // AI/Machine Learning projects
    if (title.includes('ai') || title.includes('artificial intelligence') || title.includes('machine learning') || title.includes('ml') || description.includes('machine learning') || description.includes('artificial intelligence')) {
        mainTopic = "Artificial Intelligence and Machine Learning";
        chapters = [
            "INTRODUCTION TO ARTIFICIAL INTELLIGENCE AND MACHINE LEARNING",
            "LITERATURE REVIEW AND THEORETICAL FOUNDATIONS",
            "MACHINE LEARNING ALGORITHMS AND METHODOLOGIES",
            "SYSTEM DESIGN AND ARCHITECTURE",
            "IMPLEMENTATION AND MODEL DEVELOPMENT",
            "TESTING, VALIDATION AND PERFORMANCE ANALYSIS"
        ];
    }
    // Web Development projects
    else if (title.includes('web') || title.includes('website') || title.includes('react') || title.includes('frontend') || title.includes('backend') || description.includes('web development') || description.includes('website')) {
        mainTopic = "Web Development";
        chapters = [
            "INTRODUCTION TO MODERN WEB DEVELOPMENT",
            "WEB TECHNOLOGIES AND FRAMEWORKS REVIEW",
            "SYSTEM ARCHITECTURE AND DESIGN METHODOLOGY",
            "FRONTEND AND BACKEND IMPLEMENTATION",
            "DATABASE INTEGRATION AND API DEVELOPMENT",
            "TESTING, DEPLOYMENT AND PERFORMANCE OPTIMIZATION"
        ];
    }
    // Mobile App projects
    else if (title.includes('mobile') || title.includes('app') || title.includes('android') || title.includes('ios') || title.includes('flutter') || description.includes('mobile application')) {
        mainTopic = "Mobile Application Development";
        chapters = [
            "INTRODUCTION TO MOBILE APPLICATION DEVELOPMENT",
            "MOBILE PLATFORMS AND DEVELOPMENT FRAMEWORKS",
            "APPLICATION DESIGN AND USER EXPERIENCE",
            "MOBILE APP IMPLEMENTATION AND FEATURES",
            "TESTING AND CROSS-PLATFORM COMPATIBILITY",
            "DEPLOYMENT AND PERFORMANCE OPTIMIZATION"
        ];
    }
    // Data Science/Analytics projects
    else if (title.includes('data') || title.includes('analytics') || title.includes('analysis') || title.includes('visualization') || description.includes('data analysis') || description.includes('data science')) {
        mainTopic = "Data Science and Analytics";
        chapters = [
            "INTRODUCTION TO DATA SCIENCE AND ANALYTICS",
            "DATA COLLECTION AND PREPROCESSING TECHNIQUES",
            "STATISTICAL ANALYSIS AND VISUALIZATION METHODS",
            "DATA MODELING AND ALGORITHM IMPLEMENTATION",
            "RESULTS ANALYSIS AND INTERPRETATION",
            "VALIDATION AND PERFORMANCE EVALUATION"
        ];
    }
    // IoT projects
    else if (title.includes('iot') || title.includes('internet of things') || title.includes('sensor') || title.includes('embedded') || description.includes('iot') || description.includes('sensors')) {
        mainTopic = "Internet of Things (IoT)";
        chapters = [
            "INTRODUCTION TO INTERNET OF THINGS",
            "IOT ARCHITECTURE AND COMMUNICATION PROTOCOLS",
            "SENSOR NETWORKS AND EMBEDDED SYSTEMS",
            "SYSTEM IMPLEMENTATION AND HARDWARE INTEGRATION",
            "DATA PROCESSING AND CLOUD CONNECTIVITY",
            "TESTING AND SYSTEM VALIDATION"
        ];
    }
    // Blockchain projects
    else if (title.includes('blockchain') || title.includes('cryptocurrency') || title.includes('smart contract') || description.includes('blockchain') || description.includes('distributed ledger')) {
        mainTopic = "Blockchain Technology";
        chapters = [
            "INTRODUCTION TO BLOCKCHAIN TECHNOLOGY",
            "BLOCKCHAIN ARCHITECTURE AND CONSENSUS MECHANISMS",
            "SMART CONTRACTS AND DECENTRALIZED APPLICATIONS",
            "SYSTEM DESIGN AND IMPLEMENTATION",
            "SECURITY AND PERFORMANCE ANALYSIS",
            "TESTING AND DEPLOYMENT STRATEGIES"
        ];
    }
    // Cybersecurity projects
    else if (title.includes('security') || title.includes('cybersecurity') || title.includes('encryption') || title.includes('firewall') || description.includes('security') || description.includes('cybersecurity')) {
        mainTopic = "Cybersecurity";
        chapters = [
            "INTRODUCTION TO CYBERSECURITY",
            "SECURITY THREATS AND VULNERABILITY ANALYSIS",
            "SECURITY FRAMEWORKS AND METHODOLOGIES",
            "SECURITY SYSTEM DESIGN AND IMPLEMENTATION",
            "PENETRATION TESTING AND SECURITY VALIDATION",
            "INCIDENT RESPONSE AND SECURITY MONITORING"
        ];
    }
    // Database projects
    else if (title.includes('database') || title.includes('sql') || title.includes('nosql') || title.includes('mongodb') || description.includes('database') || description.includes('data management')) {
        mainTopic = "Database Management Systems";
        chapters = [
            "INTRODUCTION TO DATABASE MANAGEMENT SYSTEMS",
            "DATABASE DESIGN AND NORMALIZATION",
            "QUERY OPTIMIZATION AND PERFORMANCE TUNING",
            "DATABASE IMPLEMENTATION AND INTEGRATION",
            "BACKUP, RECOVERY AND SECURITY MEASURES",
            "TESTING AND PERFORMANCE EVALUATION"
        ];
    }
    // Cloud Computing projects
    else if (title.includes('cloud') || title.includes('aws') || title.includes('azure') || title.includes('docker') || description.includes('cloud computing') || description.includes('microservices')) {
        mainTopic = "Cloud Computing";
        chapters = [
            "INTRODUCTION TO CLOUD COMPUTING",
            "CLOUD ARCHITECTURE AND SERVICE MODELS",
            "CONTAINERIZATION AND MICROSERVICES",
            "CLOUD DEPLOYMENT AND IMPLEMENTATION",
            "SCALABILITY AND LOAD BALANCING",
            "MONITORING AND PERFORMANCE OPTIMIZATION"
        ];
    }
    // Default for other projects
    else {
        chapters = [
            "INTRODUCTION",
            "LITERATURE REVIEW AND BACKGROUND STUDY",
            "METHODOLOGY AND SYSTEM DESIGN",
            "IMPLEMENTATION AND DEVELOPMENT",
            "TESTING AND VALIDATION",
            "RESULTS AND PERFORMANCE ANALYSIS"
        ];
    }

    return { mainTopic, chapters };
}

// Function to generate AI-powered content based on word count target
async function generateComprehensiveContent(config, apiKey) {
    const targetWords = parseInt(config.targetWordCount) || 15000;
    const { mainTopic, chapters } = generateDynamicChapterTitles(config.projectTitle, config.projectDescription);
    
    console.log(`🎯 Target word count: ${targetWords} words`);
    
    // Calculate words per chapter based on target
    const wordsPerChapter = Math.floor(targetWords / chapters.length);
    
    const sections = [];
    
    for (let i = 0; i < chapters.length; i++) {
        const chapter = chapters[i];
        console.log(`⏳ Generating Chapter ${i + 1}: ${chapter}...`);
        
        const prompt = `Generate a comprehensive ${chapter} chapter for a ${config.reportType} report titled "${config.projectTitle}".
        
Project Description: ${config.projectDescription}

Write approximately ${wordsPerChapter} words for this chapter. Include relevant subsections with numbered headings (like ${i+1}.1, ${i+1}.2, ${i+1}.3, etc.), technical details, and academic content appropriate for a university-level report. Write in formal academic language with proper structure and flow.

IMPORTANT FORMATTING REQUIREMENTS:
- Use numbered subsection headings like ${i+1}.1, ${i+1}.2, ${i+1}.3, etc.
- Make ALL subsection headings BOLD by formatting them properly
- Include subsections like "Limitations and Challenges", "Performance Analysis", "Implementation Details", etc.
- Ensure subsection headings are specific to the project topic: "${config.projectTitle}"

Focus on:
- Technical depth appropriate for the project topic: ${config.projectTitle}
- Real-world applications and examples related to ${config.projectTitle}
- Academic rigor and proper terminology for ${config.projectTitle}
- Comprehensive coverage of ${chapter} as it relates to ${config.projectTitle}
- Professional formatting with clear, bold subsection headings

Do not include the main chapter title in your response - only generate the content with properly formatted subsections.`;

        const result = await generateContent(prompt, apiKey);
        
        sections.push({
            title: `CHAPTER ${i + 1}: ${chapter.toUpperCase()}`,
            content: result.content,
            wordCount: result.wordCount
        });
        
        console.log(`✅ Generated Chapter ${i + 1} (${result.wordCount} words)`);
    }
    
    const totalWords = sections.reduce((sum, section) => sum + section.wordCount, 0);
    console.log(`📊 Total generated words: ${totalWords}`);
    
    return sections;




}

// Function to generate chapter content based on chapter number and topic
function generateChapterContent(chapterNum, chapterTitle, config, multiplier) {
    const baseContent = getBaseChapterContent(chapterNum, chapterTitle, config);

    // Multiply content based on target word count
    let expandedContent = baseContent;

    if (multiplier > 1) {
        // Add more detailed subsections and content
        const additionalContent = generateAdditionalContent(chapterNum, chapterTitle, config);
        expandedContent = baseContent + "\n\n" + additionalContent;

        if (multiplier > 2) {
            // For 25000+ words, add even more detailed content
            const extraContent = generateExtraDetailedContent(chapterNum, chapterTitle, config);
            expandedContent += "\n\n" + extraContent;
        }
    }

    return expandedContent;
}

// Base content for each chapter
function getBaseChapterContent(chapterNum, chapterTitle, config) {
    switch (chapterNum) {
        case 1:
            return `1.1 Background and Motivation

The field of ${config.course} has witnessed significant advancements in recent years, particularly in areas related to ${config.projectTitle}. This project addresses the growing need for innovative solutions in this domain through systematic analysis and implementation of modern technologies.

The motivation for this work stems from the observation that current approaches have limitations that can be addressed through comprehensive system design and implementation. The project aims to bridge this gap by developing a robust solution that incorporates best practices and modern methodologies.

1.2 Problem Statement

The primary problem addressed in this project is the need for an efficient and effective solution for ${config.projectTitle}. Current systems face challenges in terms of scalability, performance, user experience, and maintainability.

Specific issues identified include inadequate performance under high load conditions, limited scalability options, poor user interface design, and lack of comprehensive documentation. These problems significantly impact the overall effectiveness of existing solutions.

1.3 Objectives

The main objectives of this project are to develop a comprehensive solution for ${config.projectTitle}, implement modern technologies and best practices, ensure scalability and performance optimization, and provide an intuitive user interface and experience.

Primary objectives include designing and implementing a robust system architecture, developing efficient algorithms and data structures, creating an intuitive and responsive user interface, ensuring comprehensive testing and validation, and providing detailed documentation and user guides.

1.4 Scope and Limitations

This project covers the complete development lifecycle from analysis to implementation and testing. The scope includes system design, development, comprehensive testing, documentation, and deployment preparation.

Limitations include time constraints, resource availability, and technical constraints that may affect the implementation of certain advanced features. These limitations are carefully considered and addressed through appropriate planning and risk management strategies.`;
        case 2:
            return `2.1 Theoretical Background

The theoretical foundation of this work is based on established principles in ${config.course} and related fields. Various research papers, academic sources, and industry publications have been reviewed to understand the current state of the art and identify opportunities for innovation.

Key concepts and methodologies relevant to ${config.projectTitle} have been studied and analyzed. The literature review provides a comprehensive understanding of the domain and establishes the theoretical framework for this work.

2.2 Technology Review

Modern technologies and frameworks relevant to this project have been extensively reviewed. This includes analysis of programming languages, databases, frameworks, and tools that are suitable for the implementation.

The selection of technologies is based on factors such as performance, scalability, community support, and project requirements. Each technology choice is justified based on its suitability for the specific requirements of this project.

2.3 Related Work and Existing Solutions

Several existing solutions and research works have been analyzed to understand current approaches and their limitations. This analysis helps in identifying gaps and opportunities for improvement.

Comparative studies have been conducted to evaluate different methodologies and their effectiveness. The findings from this analysis inform the design decisions for the proposed solution.

2.4 Research Gap and Justification

Based on the literature review, specific gaps have been identified in current approaches. This project aims to address these gaps through innovative solutions and methodologies.

The justification for this work is based on the potential impact and benefits it can provide to users, organizations, and the broader community. The solution addresses real-world problems and provides practical value that extends beyond academic interest.`;

        case 3:
            return `3.1 Development Approach

The project follows a systematic development approach that includes planning, analysis, design, implementation, testing, and deployment phases. The methodology is designed to ensure quality, efficiency, and effectiveness throughout the development process.

The development approach emphasizes iterative development, continuous integration, and comprehensive testing. Agile methodologies are employed to ensure flexibility and responsiveness to changing requirements.

3.2 System Requirements

Functional and non-functional requirements have been carefully analyzed and documented. This includes performance requirements, security considerations, usability factors, and scalability requirements.

Requirements gathering involved stakeholder consultation and analysis of similar systems. The requirements are prioritized based on their importance and impact on the overall system functionality.

3.3 System Design and Architecture

The system architecture is designed to be modular, scalable, and maintainable. The design follows established software engineering principles and incorporates modern architectural patterns.

Key design decisions are documented and justified based on their alignment with project objectives and requirements. The architecture supports future enhancements and modifications.

3.4 Implementation Strategy

The implementation strategy focuses on incremental development with continuous testing and validation. The approach ensures that each component is thoroughly tested before integration.

Development tools and environments are selected to support efficient development and collaboration. Version control and project management tools are used to track progress and manage changes.`;

        case 4:
            return `4.1 System Architecture Implementation

The system architecture has been implemented using modern technologies and frameworks. The implementation follows the design specifications and incorporates best practices for software development.

Key components include the user interface layer, business logic layer, and data access layer. Each layer is implemented with appropriate technologies and follows established design patterns.

4.2 Core Module Development

Individual modules have been developed and tested independently before integration. Each module is designed to be self-contained and follows established coding standards.

The development process includes code reviews, unit testing, and documentation. Quality assurance measures are implemented to ensure code quality and maintainability.

4.3 Database Design and Implementation

The database design supports the functional requirements and ensures data integrity, security, and performance. Proper indexing and optimization techniques have been implemented.

Database schema is designed to be normalized and efficient. Backup and recovery procedures are established to ensure data protection and availability.

4.4 User Interface Development

The user interface is designed to be intuitive, responsive, and accessible. Modern web technologies and frameworks are used to create an engaging user experience.

User interface components are developed with reusability and maintainability in mind. Responsive design principles are applied to ensure compatibility across different devices and screen sizes.

4.5 Integration and Testing

All components have been integrated and thoroughly tested to ensure proper functionality and performance. Integration testing validates the interaction between different modules.

System testing is conducted to verify that all requirements are met and the system performs as expected. Performance testing ensures that the system can handle expected load conditions.`;

        case 5:
            return `5.1 Testing Strategy

A comprehensive testing strategy is employed that includes unit testing, integration testing, system testing, performance testing, and user acceptance testing. The strategy is designed to ensure that all aspects of the system are thoroughly tested and validated.

The testing strategy covers all levels of testing from unit tests to system-level validation. Automated testing tools and frameworks are used to ensure consistency and efficiency.

5.2 Unit Testing

Individual components and modules are tested in isolation to verify their functionality. Unit tests are automated and integrated into the development process.

Test cases are designed to cover normal operation, edge cases, and error conditions. Code coverage metrics are used to ensure comprehensive testing of all code paths.

5.3 Integration Testing

Integration testing validates the interaction between different components and modules. This ensures that the system works correctly as a whole.

Interface testing is conducted to verify that data flows correctly between different system components. API testing ensures that all interfaces function as specified.

5.4 System Testing

System-level testing validates the complete functionality of the application. This includes functional testing, performance testing, and security testing.

End-to-end testing scenarios are designed to simulate real-world usage patterns. User workflows are tested to ensure that the system meets user expectations.

5.5 Performance Analysis

Performance testing ensures that the system meets the specified performance requirements under various load conditions. Optimization techniques are applied based on the test results.

Load testing and stress testing are conducted to identify performance bottlenecks and ensure system stability under high load conditions.

5.6 User Acceptance Testing

User acceptance testing validates that the system meets the user requirements and provides a satisfactory user experience. Feedback from users is incorporated into the final implementation.

Usability testing is conducted to ensure that the system is easy to use and meets accessibility standards. User feedback is collected and analyzed to identify areas for improvement.`;

        case 6:
            return `6.1 Summary of Achievements

This project has successfully achieved its primary objectives of developing a comprehensive solution for ${config.projectTitle}. All planned features have been implemented, tested, and validated according to the requirements and specifications.

The project has successfully delivered a robust and scalable solution that addresses the identified problems and requirements. The implementation demonstrates effective use of modern technologies and best practices.

6.2 Key Contributions

The key contributions of this work include the development of an innovative solution, implementation of best practices, comprehensive testing and validation, and detailed documentation.

The solution provides significant value to users and organizations by addressing real-world problems and improving efficiency and effectiveness in the target domain.

6.3 Lessons Learned

The project has provided valuable learning experiences in system design, implementation, testing, and project management. These lessons will be valuable for future projects and professional development.

Key lessons include the importance of thorough planning, the value of iterative development, and the need for comprehensive testing and validation.

6.4 Future Enhancements

Several opportunities for future enhancements have been identified. These include additional features, performance optimizations, and integration with other systems.

Future work could focus on expanding the functionality, improving performance, and adding support for additional use cases and requirements.

6.5 Final Remarks

The successful completion of this project demonstrates the practical application of theoretical concepts and the ability to deliver high-quality software solutions. The work contributes to the advancement of knowledge in the field and provides a solid foundation for future research and development.

The project has met all its objectives and provides a valuable contribution to the field of ${config.course}. The solution is ready for deployment and can provide immediate benefits to users and organizations.`;

        default:
            return `This chapter provides comprehensive coverage of the topic with detailed analysis, implementation details, and thorough documentation of all aspects related to ${config.projectTitle}.

The content includes theoretical foundations, practical implementations, and real-world applications that demonstrate the effectiveness of the proposed solution.

Multiple subsections cover different aspects of the topic, providing in-depth analysis and detailed explanations of all components and their interactions.

The chapter concludes with performance analysis, validation results, and recommendations for future improvements and enhancements.`;
    }
}

// Generate additional content for higher word counts
function generateAdditionalContent(chapterNum, chapterTitle, config) {
    return `${chapterNum}.${chapterNum + 4} Advanced Analysis and Implementation Details

This section provides detailed analysis of advanced features and implementation specifics related to ${config.projectTitle}. The comprehensive approach ensures thorough coverage of all technical aspects and considerations.

Advanced algorithms and data structures are implemented to optimize performance and ensure scalability. The implementation includes error handling, exception management, and robust validation mechanisms.

${chapterNum}.${chapterNum + 5} Performance Optimization and Scalability

Performance optimization techniques are applied throughout the system to ensure efficient operation under various load conditions. Scalability considerations are integrated into the design to support future growth and expansion.

Caching mechanisms, database optimization, and efficient algorithms contribute to improved system performance. Load balancing and distributed processing capabilities ensure system reliability and availability.

${chapterNum}.${chapterNum + 6} Security and Compliance Considerations

Security measures are implemented at all levels of the system to protect against various threats and vulnerabilities. Compliance with industry standards and best practices ensures system reliability and trustworthiness.

Authentication, authorization, and data encryption mechanisms provide comprehensive security coverage. Regular security audits and vulnerability assessments ensure ongoing protection and compliance.`;
}

// Generate extra detailed content for 25000+ word reports
function generateExtraDetailedContent(chapterNum, chapterTitle, config) {
    return `${chapterNum}.${chapterNum + 7} Detailed Technical Specifications

This section provides comprehensive technical specifications and detailed documentation of all system components. The specifications include interface definitions, data formats, and communication protocols.

Technical diagrams, flowcharts, and architectural drawings illustrate the system design and component interactions. Detailed code examples and implementation guidelines support development and maintenance activities.

${chapterNum}.${chapterNum + 8} Case Studies and Real-World Applications

Multiple case studies demonstrate the practical application of the developed solution in real-world scenarios. The case studies highlight the benefits, challenges, and lessons learned from actual implementations.

Performance metrics, user feedback, and system analytics provide quantitative evidence of the solution's effectiveness. Comparative analysis with existing solutions demonstrates the advantages and improvements achieved.

${chapterNum}.${chapterNum + 9} Advanced Features and Future Enhancements

Advanced features and capabilities extend the basic functionality to support complex use cases and specialized requirements. The features are designed to be modular and extensible to support future enhancements.

Integration capabilities with external systems and services provide additional value and functionality. API documentation and integration guidelines support third-party development and customization.

${chapterNum}.${chapterNum + 10} Maintenance and Support Considerations

Comprehensive maintenance procedures and support documentation ensure long-term system reliability and availability. Monitoring tools and diagnostic capabilities support proactive maintenance and issue resolution.

User training materials, documentation, and support resources facilitate system adoption and effective utilization. Version control and change management procedures ensure controlled system evolution and updates.`;
}

// Base content for each chapter
function getBaseChapterContent(chapterNum, chapterTitle, config) {
    switch (chapterNum) {
        case 1:
            return `1.1 Background and Motivation

The field of ${config.course} has witnessed significant advancements in recent years, particularly in areas related to ${config.projectTitle}. This project addresses the growing need for innovative solutions in this domain through systematic analysis and implementation of modern technologies.

The motivation for this work stems from the observation that current approaches have limitations that can be addressed through comprehensive system design and implementation. The project aims to bridge this gap by developing a robust solution that incorporates best practices and modern methodologies.

1.2 Problem Statement

The primary problem addressed in this project is the need for an efficient and effective solution for ${config.projectTitle}. Current systems face challenges in terms of scalability, performance, user experience, and maintainability.

Specific issues identified include inadequate performance under high load conditions, limited scalability options, poor user interface design, and lack of comprehensive documentation. These problems significantly impact the overall effectiveness of existing solutions.

1.3 Objectives

The main objectives of this project are to develop a comprehensive solution for ${config.projectTitle}, implement modern technologies and best practices, ensure scalability and performance optimization, and provide an intuitive user interface and experience.

Primary objectives include designing and implementing a robust system architecture, developing efficient algorithms and data structures, creating an intuitive and responsive user interface, ensuring comprehensive testing and validation, and providing detailed documentation and user guides.

1.4 Scope and Limitations

This project covers the complete development lifecycle from analysis to implementation and testing. The scope includes system design, development, comprehensive testing, documentation, and deployment preparation.

Limitations include time constraints, resource availability, and technical constraints that may affect the implementation of certain advanced features. These limitations are carefully considered and addressed through appropriate planning and risk management strategies.`;
        case 2:
            return `2.1 Theoretical Background

The theoretical foundation of this work is based on established principles in ${config.course} and related fields. Various research papers, academic sources, and industry publications have been reviewed to understand the current state of the art and identify opportunities for innovation.

Key concepts and methodologies relevant to ${config.projectTitle} have been studied and analyzed. The literature review provides a comprehensive understanding of the domain and establishes the theoretical framework for this work.

2.2 Technology Review

Modern technologies and frameworks relevant to this project have been extensively reviewed. This includes analysis of programming languages, databases, frameworks, and tools that are suitable for the implementation.

The selection of technologies is based on factors such as performance, scalability, community support, and project requirements. Each technology choice is justified based on its suitability for the specific requirements of this project.

2.3 Related Work and Existing Solutions

Several existing solutions and research works have been analyzed to understand current approaches and their limitations. This analysis helps in identifying gaps and opportunities for improvement.

Comparative studies have been conducted to evaluate different methodologies and their effectiveness. The findings from this analysis inform the design decisions for the proposed solution.

2.4 Research Gap and Justification

Based on the literature review, specific gaps have been identified in current approaches. This project aims to address these gaps through innovative solutions and methodologies.

The justification for this work is based on the potential impact and benefits it can provide to users, organizations, and the broader community. The solution addresses real-world problems and provides practical value that extends beyond academic interest.`;

        case 3:
            return `3.1 Development Approach

The project follows a systematic development approach that includes planning, analysis, design, implementation, testing, and deployment phases. The methodology is designed to ensure quality, efficiency, and effectiveness throughout the development process.

The development approach emphasizes iterative development, continuous integration, and comprehensive testing. Agile methodologies are employed to ensure flexibility and responsiveness to changing requirements.

3.2 System Requirements

Functional and non-functional requirements have been carefully analyzed and documented. This includes performance requirements, security considerations, usability factors, and scalability requirements.

Requirements gathering involved stakeholder consultation and analysis of similar systems. The requirements are prioritized based on their importance and impact on the overall system functionality.

3.3 System Design and Architecture

The system architecture is designed to be modular, scalable, and maintainable. The design follows established software engineering principles and incorporates modern architectural patterns.

Key design decisions are documented and justified based on their alignment with project objectives and requirements. The architecture supports future enhancements and modifications.

3.4 Implementation Strategy

The implementation strategy focuses on incremental development with continuous testing and validation. The approach ensures that each component is thoroughly tested before integration.

Development tools and environments are selected to support efficient development and collaboration. Version control and project management tools are used to track progress and manage changes.`;

        case 4:
            return `4.1 System Architecture Implementation

The system architecture has been implemented using modern technologies and frameworks. The implementation follows the design specifications and incorporates best practices for software development.

Key components include the user interface layer, business logic layer, and data access layer. Each layer is implemented with appropriate technologies and follows established design patterns.

4.2 Core Module Development

Individual modules have been developed and tested independently before integration. Each module is designed to be self-contained and follows established coding standards.

The development process includes code reviews, unit testing, and documentation. Quality assurance measures are implemented to ensure code quality and maintainability.

4.3 Database Design and Implementation

The database design supports the functional requirements and ensures data integrity, security, and performance. Proper indexing and optimization techniques have been implemented.

Database schema is designed to be normalized and efficient. Backup and recovery procedures are established to ensure data protection and availability.

4.4 User Interface Development

The user interface is designed to be intuitive, responsive, and accessible. Modern web technologies and frameworks are used to create an engaging user experience.

User interface components are developed with reusability and maintainability in mind. Responsive design principles are applied to ensure compatibility across different devices and screen sizes.

4.5 Integration and Testing

All components have been integrated and thoroughly tested to ensure proper functionality and performance. Integration testing validates the interaction between different modules.

System testing is conducted to verify that all requirements are met and the system performs as expected. Performance testing ensures that the system can handle expected load conditions.`;

        case 5:
            return `5.1 Testing Strategy

A comprehensive testing strategy is employed that includes unit testing, integration testing, system testing, performance testing, and user acceptance testing. The strategy is designed to ensure that all aspects of the system are thoroughly tested and validated.

The testing strategy covers all levels of testing from unit tests to system-level validation. Automated testing tools and frameworks are used to ensure consistency and efficiency.

5.2 Unit Testing

Individual components and modules are tested in isolation to verify their functionality. Unit tests are automated and integrated into the development process.

Test cases are designed to cover normal operation, edge cases, and error conditions. Code coverage metrics are used to ensure comprehensive testing of all code paths.

5.3 Integration Testing

Integration testing validates the interaction between different components and modules. This ensures that the system works correctly as a whole.

Interface testing is conducted to verify that data flows correctly between different system components. API testing ensures that all interfaces function as specified.

5.4 System Testing

System-level testing validates the complete functionality of the application. This includes functional testing, performance testing, and security testing.

End-to-end testing scenarios are designed to simulate real-world usage patterns. User workflows are tested to ensure that the system meets user expectations.

5.5 Performance Analysis

Performance testing ensures that the system meets the specified performance requirements under various load conditions. Optimization techniques are applied based on the test results.

Load testing and stress testing are conducted to identify performance bottlenecks and ensure system stability under high load conditions.

5.6 User Acceptance Testing

User acceptance testing validates that the system meets the user requirements and provides a satisfactory user experience. Feedback from users is incorporated into the final implementation.

Usability testing is conducted to ensure that the system is easy to use and meets accessibility standards. User feedback is collected and analyzed to identify areas for improvement.`;

        case 6:
            return `6.1 Summary of Achievements

This project has successfully achieved its primary objectives of developing a comprehensive solution for ${config.projectTitle}. All planned features have been implemented, tested, and validated according to the requirements and specifications.

The project has successfully delivered a robust and scalable solution that addresses the identified problems and requirements. The implementation demonstrates effective use of modern technologies and best practices.

6.2 Key Contributions

The key contributions of this work include the development of an innovative solution, implementation of best practices, comprehensive testing and validation, and detailed documentation.

The solution provides significant value to users and organizations by addressing real-world problems and improving efficiency and effectiveness in the target domain.

6.3 Lessons Learned

The project has provided valuable learning experiences in system design, implementation, testing, and project management. These lessons will be valuable for future projects and professional development.

Key lessons include the importance of thorough planning, the value of iterative development, and the need for comprehensive testing and validation.

6.4 Future Enhancements

Several opportunities for future enhancements have been identified. These include additional features, performance optimizations, and integration with other systems.

Future work could focus on expanding the functionality, improving performance, and adding support for additional use cases and requirements.

6.5 Final Remarks

The successful completion of this project demonstrates the practical application of theoretical concepts and the ability to deliver high-quality software solutions. The work contributes to the advancement of knowledge in the field and provides a solid foundation for future research and development.

The project has met all its objectives and provides a valuable contribution to the field of ${config.course}. The solution is ready for deployment and can provide immediate benefits to users and organizations.`;

        default:
            return `This chapter provides comprehensive coverage of the topic with detailed analysis, implementation details, and thorough documentation of all aspects related to ${config.projectTitle}.

The content includes theoretical foundations, practical implementations, and real-world applications that demonstrate the effectiveness of the proposed solution.

Multiple subsections cover different aspects of the topic, providing in-depth analysis and detailed explanations of all components and their interactions.

The chapter concludes with performance analysis, validation results, and recommendations for future improvements and enhancements.`;
    }
}

// WORKING DOCX creation function - Professional Format
async function createProfessionalDocx(config, apiKey) {
    try {
        console.log('📝 Creating professional DOCX with comprehensive structure...');

        // Generate comprehensive content with AI
        const sections = await generateComprehensiveContent(config, apiKey);
        const mainBodyContent = [];

        // Process each section
        for (let i = 0; i < sections.length; i++) {
            const section = sections[i];

            // Add page break before each chapter (except the first one)
            if (i > 0) {
                mainBodyContent.push(new Paragraph({ children: [new PageBreak()] }));
            }

            // Chapter Title Paragraph
            mainBodyContent.push(
                new Paragraph({
                    children: [new TextRun({ text: section.title, bold: true, size: 28, font: "Times New Roman" })],
                    alignment: AlignmentType.CENTER,
                    spacing: { before: 480, after: 240 },
                })
            );

            // Process content paragraphs
            const contentParagraphs = createFormattedParagraphs(section.content);
            mainBodyContent.push(...contentParagraphs);
        }

        // Add References section
        mainBodyContent.push(new Paragraph({ children: [new PageBreak()] }));
        mainBodyContent.push(
            new Paragraph({
                children: [new TextRun({ text: "REFERENCES", bold: true, size: 28, font: "Times New Roman" })],
                alignment: AlignmentType.CENTER,
                spacing: { before: 480, after: 240 },
            })
        );

        // Add reference content
        const references = [
            "1. https://docs.oracle.com/javase/ - Official Java documentation and programming guides",
            "2. https://www.mysql.com/ - MySQL database official website and comprehensive documentation",
            "3. https://spring.io/ - Spring Framework documentation, tutorials, and best practices",
            "4. https://reactjs.org/ - React JavaScript library official documentation and guides",
            "5. https://nodejs.org/ - Node.js runtime environment documentation and resources",
            "6. https://www.mongodb.com/ - MongoDB database documentation, tutorials, and guides",
            "7. https://angular.io/ - Angular framework official documentation and development guides",
            "8. https://vuejs.org/ - Vue.js framework documentation, tutorials, and community resources",
            "9. https://www.python.org/ - Python programming language official website and documentation",
            "10. https://developer.mozilla.org/ - Web development resources, documentation, and tutorials"
        ];

        const referenceParagraphs = createFormattedParagraphs(references.join('\n'));
        mainBodyContent.push(...referenceParagraphs);

        // Create the complete document
        const doc = new Document({
            sections: [
                // **SECTION 1: COVER PAGE (No Header/Footer)**
                {
                    children: createCoverPage(config),
                    headers: { default: new Header({ children: [new Paragraph("")] }) },
                    footers: { default: new Footer({ children: [new Paragraph("")] }) },
                    properties: {
                        page: {
                            pageNumbers: {
                                start: 1,
                                formatType: NumberFormat.NONE
                            },
                            margin: {
                                top: 1440,
                                right: 1440,
                                bottom: 1440,
                                left: 1440
                            }
                        }
                    }
                },

                // **SECTION 2: FRONT MATTER (Roman Numerals i, ii, iii, iv)**
                {
                    headers: { 
                        default: new Header({ 
                            children: [
                                new Paragraph({
                                    children: [
                                        new TextRun({
                                            text: config.projectTitle.toUpperCase(),
                                            bold: true,
                                            size: 20, // 10pt
                                            font: "Times New Roman"
                                        })
                                    ],
                                    alignment: AlignmentType.CENTER,
                                    spacing: { after: 120 }
                                })
                            ] 
                        }) 
                    },
                    footers: { default: createFooter() },
                    children: [
                        ...createCertificatePage(config),
                        new Paragraph({ children: [new PageBreak()] }),
                        ...createAcknowledgementPage(config),
                        new Paragraph({ children: [new PageBreak()] }),
                        ...createAbstractPage(config),
                        new Paragraph({ children: [new PageBreak()] }),
                        ...createTableOfContentsPage(config)
                    ],
                    properties: {
                        page: {
                            pageNumbers: {
                                start: 1,
                                formatType: NumberFormat.LOWER_ROMAN,
                            },
                            margin: {
                                top: 1440,
                                right: 1440,
                                bottom: 1440,
                                left: 1440
                            }
                        },
                    },
                },

                // **SECTION 3: MAIN BODY & REFERENCES (Arabic Numerals 1, 2, 3...)**
                {
                    headers: { 
                        default: new Header({ 
                            children: [
                                new Paragraph({
                                    children: [
                                        new TextRun({
                                            text: config.projectTitle.toUpperCase(),
                                            bold: true,
                                            size: 20, // 10pt
                                            font: "Times New Roman"
                                        })
                                    ],
                                    alignment: AlignmentType.CENTER,
                                    spacing: { after: 120 }
                                })
                            ] 
                        }) 
                    },
                    footers: { default: createFooter() },
                    children: mainBodyContent,
                    properties: {
                        page: {
                            pageNumbers: {
                                start: 1,
                                formatType: NumberFormat.DECIMAL,
                            },
                            margin: {
                                top: 1440,
                                right: 1440,
                                bottom: 1440,
                                left: 1440
                            }
                        },
                    },
                },
            ],
            // Default styles for all sections
            styles: {
                default: {
                    document: {
                        run: {
                            size: 24, // 12pt
                            font: "Times New Roman",
                        },
                        paragraph: {
                            spacing: {
                                line: 360, // 1.5 line spacing
                            },
                        },
                    },
                },
            },
        });

        return await Packer.toBuffer(doc);

    } catch (error) {
        console.error('DOCX generation error:', error);
        throw new Error(`Failed to create DOCX: ${error.message}`);
    }
}

// Report generation endpoint
app.post('/api/generate-report', async (req, res) => {
    const sessionId = Date.now().toString();

    try {
        const config = req.body;

        // Validate required fields (API key is optional for comprehensive reports)
        const required = ['studentName', 'studentId', 'course', 'semester', 'institution', 'supervisor', 'projectTitle', 'projectDescription', 'reportType', 'targetWordCount'];

        for (const field of required) {
            if (!config[field] || config[field].trim() === '') {
                return res.status(400).json({
                    error: `Missing required field: ${field}`
                });
            }
        }

        // Set default department if not provided
        if (!config.department) {
            config.department = `Department of ${config.course}`;
        }

        // Return session ID immediately
        res.json({ sessionId, message: 'Report generation started' });

        console.log(`🎯 Generating professional report for: ${config.projectTitle}`);

        // Start progress tracking
        updateProgress(sessionId, 10, 'Initializing system...', 300);

        // Generate report immediately
        (async () => {
            try {
                updateProgress(sessionId, 30, 'Creating comprehensive report structure...', 180);

                console.log('📝 Creating professional DOCX report...');

                updateProgress(sessionId, 70, 'Converting to professional DOCX format...', 90);

                // Convert to DOCX using professional function
                const docxBuffer = await createProfessionalDocx(config);

                updateProgress(sessionId, 90, 'Finalizing professional DOCX report...', 30);

                // Create filename
                const filename = `${config.studentName.replace(/\s+/g, '_')}_${config.projectTitle.replace(/[^a-zA-Z0-9]/g, '_')}_Professional_Report.docx`;

                // Store the completed report for download
                const reportData = {
                    content: docxBuffer,
                    filename: filename,
                    completed: true,
                    completedAt: new Date().toISOString(),
                    isDocx: true,
                    isProfessional: true
                };

                progressTracking.set(sessionId, {
                    progress: 100,
                    status: 'Professional report completed! Ready for download.',
                    timeRemaining: 0,
                    reportData: reportData
                });

                console.log(`✅ Professional DOCX report generated: ${filename}`);

            } catch (error) {
                console.error('❌ Report generation failed:', error);
                console.error('Error details:', error.stack);

                // Store error information for debugging
                progressTracking.set(sessionId, {
                    progress: 0,
                    status: `Generation failed: ${error.message}`,
                    timeRemaining: 0,
                    error: true,
                    errorMessage: error.message,
                    errorStack: error.stack
                });
            }
        })().catch(error => {
            console.error('❌ Immediate report generation failed:', error);
            console.error('Error details:', error.stack);

            // Store error information for debugging
            progressTracking.set(sessionId, {
                progress: 0,
                status: `Generation failed: ${error.message}`,
                timeRemaining: 0,
                error: true,
                errorMessage: error.message,
                errorStack: error.stack
            });
        });

    } catch (error) {
        console.error('❌ Report generation error:', error);
        res.status(500).json({ error: error.message });
    }
});

// Download endpoint
app.get('/api/download/:sessionId', (req, res) => {
    const sessionId = req.params.sessionId;
    const progressData = progressTracking.get(sessionId);

    if (!progressData || !progressData.reportData) {
        return res.status(404).json({ error: 'Report not found or not ready' });
    }

    const { content, filename, isDocx } = progressData.reportData;

    // Set headers for file download
    if (isDocx) {
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document');
    } else {
        res.setHeader('Content-Type', 'text/plain');
    }

    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.setHeader('X-Report-Type', 'professional-docx');

    res.send(content);
});

// Start server if not in Vercel environment
if (require.main === module) {
    const PORT = process.env.PORT || 3003;
    app.listen(PORT, () => {
        console.log(`🚀 Professional AI Report Generator API running on http://localhost:${PORT}`);
        console.log(`📄 Health check: http://localhost:${PORT}/api/health`);
        console.log(`🧪 Test generation: POST http://localhost:${PORT}/api/generate-report`);
        console.log(`✨ Features: Professional format, Cover page, Certificate, Acknowledgment, Abstract, TOC, Chapters, References`);
    });
}

module.exports = app;  
      console.error('❌ Report generation error:', error);
        res.status(500).json({ 
            error: 'Failed to generate report',
            details: error.message 
        });
    }
};

// Function to generate dynamic chapter titles based on project topic (EXACTLY like offline version)
function generateDynamicChapterTitles(projectTitle, projectDescription) {
    const title = projectTitle.toLowerCase();
    const description = projectDescription.toLowerCase();

    let mainTopic = "Software Development";
    let chapters = [];

    // Java/Database projects
    if (title.includes('java') || title.includes('mysql') || title.includes('database') || description.includes('java') || description.includes('database') || description.includes('sql')) {
        mainTopic = "Java Programming and Database Systems";
        chapters = [
            "INTRODUCTION TO JAVA PROGRAMMING AND DATABASE SYSTEMS",
            "LITERATURE REVIEW AND TECHNOLOGY ANALYSIS",
            "METHODOLOGY AND SYSTEM DESIGN",
            "SYSTEM ANALYSIS AND DESIGN",
            "IMPLEMENTATION",
            "TESTING AND VALIDATION",
            "CONCLUSION"
        ];
    }
    // AI/Machine Learning projects
    else if (title.includes('ai') || title.includes('artificial intelligence') || title.includes('machine learning') || title.includes('ml') || description.includes('machine learning') || description.includes('artificial intelligence')) {
        mainTopic = "Artificial Intelligence and Machine Learning";
        chapters = [
            "INTRODUCTION TO ARTIFICIAL INTELLIGENCE AND MACHINE LEARNING",
            "LITERATURE REVIEW AND THEORETICAL FOUNDATIONS",
            "MACHINE LEARNING ALGORITHMS AND METHODOLOGIES",
            "SYSTEM DESIGN AND ARCHITECTURE",
            "IMPLEMENTATION AND MODEL DEVELOPMENT",
            "TESTING, VALIDATION AND PERFORMANCE ANALYSIS",
            "CONCLUSION"
        ];
    }
    // Web Development projects
    else if (title.includes('web') || title.includes('website') || title.includes('react') || title.includes('frontend') || title.includes('backend') || description.includes('web development') || description.includes('website')) {
        mainTopic = "Web Development";
        chapters = [
            "INTRODUCTION TO MODERN WEB DEVELOPMENT",
            "WEB TECHNOLOGIES AND FRAMEWORKS REVIEW",
            "SYSTEM ARCHITECTURE AND DESIGN METHODOLOGY",
            "FRONTEND AND BACKEND IMPLEMENTATION",
            "DATABASE INTEGRATION AND API DEVELOPMENT",
            "TESTING, DEPLOYMENT AND PERFORMANCE OPTIMIZATION",
            "CONCLUSION"
        ];
    }
    // Default for other projects
    else {
        chapters = [
            "INTRODUCTION",
            "LITERATURE REVIEW AND BACKGROUND STUDY",
            "METHODOLOGY AND SYSTEM DESIGN",
            "IMPLEMENTATION AND DEVELOPMENT",
            "TESTING AND VALIDATION",
            "RESULTS AND PERFORMANCE ANALYSIS",
            "CONCLUSION"
        ];
    }

    return { mainTopic, chapters };
}

// Function to generate chapter content (EXACTLY like offline version with accurate word counts)
function generateChapterContent(chapterNum, chapterTitle, config) {
    const targetWords = parseInt(config.targetWordCount) || 15000;
    const wordsPerChapter = Math.floor(targetWords / 7); // 7 chapters total
    
    // Base content for each chapter - comprehensive and topic-specific
    const chapterContents = {
        1: `1.1 Background and Motivation

The field of ${config.course} has witnessed significant advancements in recent years, particularly in areas related to ${config.projectTitle}. This project addresses the growing need for innovative solutions in modern technology through systematic analysis and implementation of advanced methodologies. The motivation stems from identifying gaps in current systems and the potential for improvement through comprehensive system design and development.

The rapid evolution of technology has created new opportunities and challenges in software development. Organizations increasingly require robust, scalable, and efficient solutions that can adapt to changing requirements and handle complex business processes. This project aims to bridge the gap between theoretical knowledge and practical implementation by developing a solution that incorporates industry best practices and modern development methodologies.

1.2 Problem Statement

The primary challenge lies in developing efficient and scalable solutions that meet contemporary requirements while maintaining reliability and performance standards. Current approaches often face limitations in terms of scalability, maintainability, user experience, and integration capabilities. These challenges significantly impact the overall effectiveness of existing systems and create opportunities for innovative solutions.

Specific problems identified include inadequate performance under high load conditions, limited scalability options, poor user interface design, lack of comprehensive documentation, and insufficient integration capabilities with modern systems. These issues affect user productivity, system reliability, and overall business efficiency.

1.3 Project Objectives and Goals

The main objectives include designing a comprehensive system architecture, implementing robust functionality with modern technologies, ensuring optimal performance and scalability, providing intuitive user interfaces that enhance user experience, and delivering comprehensive documentation and support materials.

Primary goals encompass developing efficient algorithms and data structures, creating responsive and accessible user interfaces, implementing comprehensive security measures, ensuring cross-platform compatibility, providing detailed testing and validation, and establishing maintenance and support procedures.

1.4 Scope and Limitations

This project covers the complete development lifecycle from requirements analysis to implementation, testing, and deployment preparation. The scope includes system architecture design, database design and implementation, user interface development, comprehensive testing strategies, performance optimization, and detailed documentation.

Limitations include time constraints that may affect the implementation of certain advanced features, resource availability for extensive testing environments, and technical constraints related to specific platform requirements. These limitations are carefully considered and addressed through appropriate planning and risk management strategies.

1.5 Report Organization and Structure

This report is structured to provide a comprehensive overview of the project development process, from initial planning and analysis to final implementation and testing. Each chapter builds upon previous sections to create a complete picture of the development methodology, implementation details, and validation results.

The organization follows academic standards and industry best practices for technical documentation, ensuring clarity, completeness, and professional presentation of all project aspects and achievements.`,

        7: `7.1 Project Summary and Achievements

The ${config.projectTitle} project has successfully achieved all primary objectives and delivered a comprehensive solution that demonstrates effective integration of modern technologies and development methodologies. This project represents a significant achievement that combines theoretical knowledge with practical implementation experience.

The primary achievement is the successful implementation of a robust, scalable solution that effectively addresses identified requirements and provides significant value to users and stakeholders. The implementation demonstrates mastery of current technologies and best practices while delivering measurable improvements over existing approaches.

7.2 Learning Outcomes and Skills Gained

This project has provided invaluable learning experiences that significantly enhanced both technical skills and professional development capabilities. The comprehensive nature of the project enabled deep exploration of software development concepts, system design principles, and project management methodologies.

Key learning outcomes include advanced programming skills, system architecture design capabilities, database management expertise, user interface development proficiency, testing and quality assurance methodologies, and project management experience. These skills provide a strong foundation for future professional development and career advancement.

7.3 Limitations and Challenges

Despite successful completion of all primary objectives, this project encountered several limitations and challenges that provided valuable learning opportunities and insights into real-world software development complexities. Understanding these limitations provides important context for project outcomes and future improvement opportunities.

Technical limitations include focus on specific technology platforms rather than broader technology ecosystems, time constraints that limited implementation of certain advanced features, and resource constraints that affected the scope of testing and validation activities. These limitations were managed through careful planning and prioritization.

7.4 Future Work and Recommendations

The successful completion of this project provides a solid foundation for numerous enhancement opportunities and future development directions. These recommendations address both technical improvements and strategic directions that could significantly enhance system capabilities and value proposition.

Future enhancements could include advanced feature implementation, integration with additional systems and platforms, performance optimization for larger scale deployments, and expansion of functionality to address additional use cases and requirements. The modular architecture design supports these enhancements while maintaining system stability and reliability.`
    };

    // Get base content for the chapter
    let content = chapterContents[chapterNum] || chapterContents[7]; // Default to conclusion if chapter not found
    
    // Add generic content for chapters 2-6
    if (chapterNum >= 2 && chapterNum <= 6) {
        content = `${chapterNum}.1 Overview and Introduction

This chapter provides comprehensive coverage of ${chapterTitle.toLowerCase()} as it relates to ${config.projectTitle}. The content demonstrates thorough understanding of the subject matter and its practical application in the context of this project.

The methodology involves systematic analysis, design, implementation, and evaluation of the proposed solution. The work demonstrates practical application of modern technologies and methodologies in addressing real-world challenges specific to ${config.projectTitle}.

${chapterNum}.2 Technical Implementation and Analysis

Key technical aspects include the development of robust algorithms, implementation of efficient data structures, and creation of user-friendly interfaces. The implementation follows industry best practices and incorporates modern development methodologies to ensure quality and maintainability.

The technical analysis covers performance optimization, security considerations, scalability planning, and integration capabilities. These aspects are crucial for the successful deployment and operation of the system in real-world environments.

${chapterNum}.3 Results and Validation

The results demonstrate successful achievement of the objectives outlined for this phase of the project. Comprehensive testing and validation ensure that all requirements are met and the system performs as expected under various conditions.

Performance metrics, user feedback, and system analytics provide quantitative evidence of the solution's effectiveness. The validation process includes both automated testing and manual verification to ensure comprehensive coverage of all system aspects.

${chapterNum}.4 Discussion and Analysis

The discussion analyzes the implications of the results and their significance in the context of the overall project objectives. Key findings are presented with supporting evidence and detailed analysis of their impact on the project outcomes.

The analysis includes comparison with existing solutions, identification of innovative aspects, and assessment of the contribution to the field. This comprehensive evaluation provides valuable insights for future development and research activities.`;
    }

    // Adjust content length based on target word count
    if (targetWords >= 20000) {
        content += `\n\n${chapterNum}.5 Advanced Implementation Details

This section provides comprehensive technical specifications and detailed documentation of advanced implementation aspects. The implementation incorporates sophisticated algorithms, optimization techniques, and architectural patterns that ensure robust performance and scalability.

Advanced features include comprehensive error handling mechanisms, sophisticated caching strategies, advanced security implementations, and performance monitoring capabilities. These features demonstrate mastery of complex technical concepts and their practical application in real-world scenarios.`;
    }

    if (targetWords >= 25000) {
        content += `\n\n${chapterNum}.6 Case Studies and Real-World Applications

Multiple case studies demonstrate the practical application and effectiveness of the implemented solution in various scenarios. These case studies provide quantitative evidence of system benefits and validate design decisions through real-world usage data.

Performance metrics, user feedback, and system analytics demonstrate significant improvements in efficiency, user satisfaction, and operational effectiveness. Comparative analysis with existing solutions shows measurable advantages in key performance indicators.`;
    }

    return content;
}

// Function to create perfectly formatted paragraphs (EXACTLY like offline version)
function createFormattedParagraphs(text) {
    const paragraphs = [];
    const lines = text.split('\n').filter(line => line.trim());

    for (const line of lines) {
        const trimmedLine = line.trim();

        if (!trimmedLine) continue;

        // Skip any chapter headings that might be generated by AI
        if (trimmedLine.match(/^#+\s*Chapter \d+:/i) || trimmedLine.match(/^Chapter \d+:/i)) {
            continue; // Skip this line completely
        }

        // Main heading (e.g., 1.1 Background) or Front Matter heading or Sub-point headings (e.g., 7.3 Limitations)
        if (trimmedLine.match(/^\d+\.\d+/) || ['TRAINING CERTIFICATE', 'ACKNOWLEDGEMENT', 'ABSTRACT', 'REFERENCES', 'LIST OF CONTENTS'].includes(trimmedLine)) {
            const isFrontMatterHeading = ['TRAINING CERTIFICATE', 'ACKNOWLEDGEMENT', 'ABSTRACT', 'REFERENCES', 'LIST OF CONTENTS'].includes(trimmedLine);

            paragraphs.push(
                new Paragraph({
                    children: [
                        new TextRun({
                            text: trimmedLine,
                            bold: true,
                            size: 28, // 14pt bold
                            font: "Times New Roman"
                        })
                    ],
                    alignment: isFrontMatterHeading ? AlignmentType.CENTER : AlignmentType.LEFT,
                    spacing: {
                        before: isFrontMatterHeading ? 480 : 360,
                        after: 240,
                        line: 360,
                        lineRule: "auto"
                    },
                    indent: { left: 0, right: 0 }
                })
            );
        }
        // Regular paragraph - 12pt normal text
        else {
            // Check for Reference format (Simple numbered list with URLs)
            const isReference = trimmedLine.match(/^\d+\.\s*https?:\/\//);

            paragraphs.push(
                new Paragraph({
                    children: [
                        new TextRun({
                            text: trimmedLine,
                            bold: false,
                            size: 24, // 12pt normal text
                            font: "Times New Roman"
                        })
                    ],
                    alignment: isReference ? AlignmentType.LEFT : AlignmentType.JUSTIFIED,
                    spacing: {
                        before: 0,
                        after: 120, // Normal spacing
                        line: 360, // 1.5 line spacing
                        lineRule: "auto"
                    },
                    indent: isReference ? { left: 360 } : { left: 0, right: 0 } // Small indent for numbered references
                })
            );
        }
    }

    return paragraphs;
}

// Function to create professional cover page (EXACTLY like offline version)
function createCoverPage(details) {
    return [
        // Institution name at top
        new Paragraph({
            children: [
                new TextRun({
                    text: details.institution.toUpperCase(),
                    bold: true,
                    size: 32, // 16pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 720, after: 240 }
        }),

        // Department
        new Paragraph({
            children: [
                new TextRun({
                    text: details.department || `Department of ${details.course}`,
                    bold: true,
                    size: 28, // 14pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 720 }
        }),

        // Project title (main heading)
        new Paragraph({
            children: [
                new TextRun({
                    text: details.projectTitle.toUpperCase(),
                    bold: true,
                    size: 36, // 18pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 1440, after: 1440 }
        }),

        // Report type
        new Paragraph({
            children: [
                new TextRun({
                    text: `A ${details.reportType.toUpperCase()} REPORT`,
                    bold: true,
                    size: 28, // 14pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 720 }
        }),

        // Submitted by
        new Paragraph({
            children: [
                new TextRun({
                    text: "Submitted by:",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 120 }
        }),

        // Student name
        new Paragraph({
            children: [
                new TextRun({
                    text: details.studentName,
                    bold: true,
                    size: 28, // 14pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 120 }
        }),

        // Student ID
        new Paragraph({
            children: [
                new TextRun({
                    text: `Student ID: ${details.studentId}`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 240 }
        }),

        // Course
        new Paragraph({
            children: [
                new TextRun({
                    text: details.course,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 120 }
        }),

        // Semester
        new Paragraph({
            children: [
                new TextRun({
                    text: details.semester,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 720 }
        }),

        // Supervisor
        new Paragraph({
            children: [
                new TextRun({
                    text: "Under the guidance of:",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 120 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: details.supervisor,
                    bold: true,
                    size: 28, // 14pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { after: 720 }
        }),

        // Year
        new Paragraph({
            children: [
                new TextRun({
                    text: new Date().getFullYear().toString(),
                    bold: true,
                    size: 28, // 14pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 720 }
        })
    ];
}

// Function to create Training Certificate page (EXACTLY like offline version)
function createCertificatePage(details) {
    return [
        new Paragraph({
            children: [
                new TextRun({
                    text: "TRAINING CERTIFICATE",
                    bold: true,
                    size: 28, // 14pt bold
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 480, after: 480 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `This is to certify that ${details.studentName} (Student ID: ${details.studentId}) has successfully completed the ${details.reportType} work on "${details.projectTitle}" as part of the curriculum for ${details.course} at ${details.institution}.`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `The work was carried out under the supervision of ${details.supervisor} during the academic year ${new Date().getFullYear()}.`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 720, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "Date: _______________",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.LEFT,
            spacing: { before: 720, after: 360 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "Signature of Supervisor",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.RIGHT,
            spacing: { before: 720 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: details.supervisor,
                    bold: true,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.RIGHT,
            spacing: { after: 240 }
        })
    ];
}

// Function to create Acknowledgement page (EXACTLY like offline version)
function createAcknowledgementPage(details) {
    return [
        new Paragraph({
            children: [
                new TextRun({
                    text: "ACKNOWLEDGEMENT",
                    bold: true,
                    size: 28, // 14pt bold
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 480, after: 480 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `I would like to express my sincere gratitude to my supervisor, ${details.supervisor}, for his valuable guidance, continuous support, and encouragement throughout the development of this ${details.reportType}. His expertise and insights have been instrumental in shaping this work.`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `I am also thankful to the faculty members of ${details.department || `Department of ${details.course}`}, ${details.institution}, for their support and for providing the necessary resources and facilities required for this work.`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "I would also like to thank my family and friends for their constant encouragement and moral support throughout this journey.",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 720, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: details.studentName,
                    bold: true,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.RIGHT,
            spacing: { before: 720 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: details.studentId,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.RIGHT,
            spacing: { after: 240 }
        })
    ];
}

// Function to create Abstract page (EXACTLY like offline version)
function createAbstractPage(details) {
    return [
        new Paragraph({
            children: [
                new TextRun({
                    text: "ABSTRACT",
                    bold: true,
                    size: 28, // 14pt bold
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 480, after: 480 }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `This ${details.reportType} presents the comprehensive study and implementation of "${details.projectTitle}". ${details.projectDescription}`,
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "The methodology involves systematic analysis, design, implementation, and evaluation of the proposed solution. The work demonstrates practical application of modern technologies and methodologies in addressing real-world challenges.",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "Key contributions include the development of a robust and scalable solution that addresses identified problems and requirements. The implementation demonstrates effective use of current technologies and best practices in software development.",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 360, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: "The results show significant improvements in efficiency, performance, and user experience compared to existing solutions. The project successfully meets all specified requirements and provides a solid foundation for future enhancements.",
                    bold: false,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.JUSTIFIED,
            spacing: { before: 360, after: 720, line: 360, lineRule: "auto" }
        }),

        new Paragraph({
            children: [
                new TextRun({
                    text: `Keywords: ${details.course}, Software Development, System Design, Implementation, Testing, ${details.projectTitle}`,
                    bold: true,
                    size: 24, // 12pt
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.LEFT,
            spacing: { before: 360 }
        })
    ];
}

// Function to create Table of Contents page (EXACTLY like offline version with accurate page numbers)
function createTableOfContentsPage(config) {
    const { chapters } = generateDynamicChapterTitles(config.projectTitle, config.projectDescription);
    const targetWords = parseInt(config.targetWordCount) || 15000;
    
    const contents = [
        new Paragraph({
            children: [
                new TextRun({
                    text: "TABLE OF CONTENTS",
                    bold: true,
                    size: 28, // 14pt bold
                    font: "Times New Roman"
                })
            ],
            alignment: AlignmentType.CENTER,
            spacing: { before: 480, after: 480 }
        })
    ];

    // Set up the custom tab stop for the page number aligned to the right margin
    const tabStops = [{
        type: TabStopType.RIGHT,
        position: 9000, // Right align at 6.25 inches
        leader: LeaderType.DOT // Dots fill the space
    }];

    // Calculate pages based on target word count
    const pagesPerChapter = targetWords >= 25000 ? 12 : targetWords >= 20000 ? 10 : 8;
    
    // TOC structure with accurate page numbers
    const tocItems = [
        { text: "Training Certificate", page: "i", bold: false, indent: 0 },
        { text: "Acknowledgement", page: "ii", bold: false, indent: 0 },
        { text: "Abstract", page: "iii", bold: false, indent: 0 },
        { text: "Table of Contents", page: "iv", bold: false, indent: 0 }
    ];

    // Add main chapters dynamically with accurate page numbers
    let pageStart = 1;
    chapters.forEach((chapter, index) => {
        const pageEnd = pageStart + pagesPerChapter - 1;
        tocItems.push({
            text: `Chapter ${index + 1}: ${chapter}`,
            page: `${pageStart}-${pageEnd}`,
            bold: false,
            indent: 0
        });
        pageStart = pageEnd + 1;
    });

    // Add references
    tocItems.push({
        text: "References",
        page: pageStart.toString(),
        bold: false,
        indent: 0
    });

    for (const item of tocItems) {
        contents.push(
            new Paragraph({
                children: [
                    new TextRun({
                        text: item.text,
                        bold: item.bold,
                        size: 24, // 12pt
                        font: "Times New Roman"
                    }),
                    new TextRun({
                        text: '\t', // Tab character to trigger the tab stop
                        size: 24,
                        font: "Times New Roman"
                    }),
                    new TextRun({
                        text: item.page,
                        bold: item.bold,
                        size: 24,
                        font: "Times New Roman"
                    })
                ],
                alignment: AlignmentType.LEFT,
                spacing: {
                    before: 0,
                    after: 120, // 6pt after
                    line: 360,  // 1.5 line spacing
                    lineRule: "auto"
                },
                indent: { left: item.indent },
                tabStops: tabStops
            })
        );
    }

    return contents;
}

// Function to create footer with page numbering (EXACTLY like offline version)
function createFooter() {
    return new Footer({
        children: [
            new Paragraph({
                children: [
                    new TextRun({
                        children: [PageNumber.CURRENT],
                        size: 24, // 12pt
                        font: "Times New Roman"
                    }),
                ],
                alignment: AlignmentType.RIGHT, // Page number on the bottom right
                spacing: { before: 0 }
            }),
        ],
    });
}

// Main function to create perfect DOCX (EXACTLY like offline version)
async function createPerfectDocx(config) {
    try {
        console.log('📝 Creating perfect DOCX with comprehensive structure...');

        // Generate dynamic chapters based on project topic
        const { chapters } = generateDynamicChapterTitles(config.projectTitle, config.projectDescription);
        const mainBodyContent = [];

        // Process each chapter (now 7 chapters including Conclusion)
        for (let i = 0; i < chapters.length; i++) {
            const chapter = chapters[i];

            // Add page break before each chapter (except the first one)
            if (i > 0) {
                mainBodyContent.push(new Paragraph({ children: [new PageBreak()] }));
            }

            // Chapter Title Paragraph
            mainBodyContent.push(
                new Paragraph({
                    children: [new TextRun({ text: `CHAPTER ${i + 1}: ${chapter}`, bold: true, size: 28, font: "Times New Roman" })],
                    alignment: AlignmentType.CENTER,
                    spacing: { before: 480, after: 240 },
                })
            );

            // Generate and add chapter content
            const chapterContent = generateChapterContent(i + 1, chapter, config);
            const contentParagraphs = createFormattedParagraphs(chapterContent);
            mainBodyContent.push(...contentParagraphs);
        }

        // Add References section
        mainBodyContent.push(new Paragraph({ children: [new PageBreak()] }));
        mainBodyContent.push(
            new Paragraph({
                children: [new TextRun({ text: "REFERENCES", bold: true, size: 28, font: "Times New Roman" })],
                alignment: AlignmentType.CENTER,
                spacing: { before: 480, after: 240 },
            })
        );

        // Add reference content
        const references = [
            "1. https://docs.oracle.com/javase/ - Official Java documentation and programming guides",
            "2. https://www.mysql.com/ - MySQL database official website and comprehensive documentation",
            "3. https://spring.io/ - Spring Framework documentation, tutorials, and best practices",
            "4. https://reactjs.org/ - React JavaScript library official documentation and guides",
            "5. https://nodejs.org/ - Node.js runtime environment documentation and resources",
            "6. https://www.mongodb.com/ - MongoDB database documentation, tutorials, and guides",
            "7. https://angular.io/ - Angular framework official documentation and development guides",
            "8. https://vuejs.org/ - Vue.js framework documentation, tutorials, and community resources",
            "9. https://www.python.org/ - Python programming language official website and documentation",
            "10. https://developer.mozilla.org/ - Web development resources, documentation, and tutorials"
        ];

        const referenceParagraphs = createFormattedParagraphs(references.join('\n'));
        mainBodyContent.push(...referenceParagraphs);

        // Create the complete document (EXACTLY like offline version)
        const doc = new Document({
            sections: [
                // **SECTION 1: COVER PAGE (No Header/Footer)**
                {
                    children: createCoverPage(config),
                    headers: { default: new Header({ children: [new Paragraph("")] }) },
                    footers: { default: new Footer({ children: [new Paragraph("")] }) },
                    properties: {
                        page: {
                            pageNumbers: {
                                start: 1,
                                formatType: NumberFormat.NONE
                            },
                            margin: {
                                top: 1440,
                                right: 1440,
                                bottom: 1440,
                                left: 1440
                            }
                        }
                    }
                },

                // **SECTION 2: FRONT MATTER (Roman Numerals i, ii, iii, iv)**
                {
                    headers: { 
                        default: new Header({ 
                            children: [
                                new Paragraph({
                                    children: [
                                        new TextRun({
                                            text: config.projectTitle.toUpperCase(),
                                            bold: true,
                                            size: 20, // 10pt
                                            font: "Times New Roman"
                                        })
                                    ],
                                    alignment: AlignmentType.CENTER,
                                    spacing: { after: 120 }
                                })
                            ] 
                        }) 
                    },
                    footers: { default: createFooter() },
                    children: [
                        ...createCertificatePage(config),
                        new Paragraph({ children: [new PageBreak()] }),
                        ...createAcknowledgementPage(config),
                        new Paragraph({ children: [new PageBreak()] }),
                        ...createAbstractPage(config),
                        new Paragraph({ children: [new PageBreak()] }),
                        ...createTableOfContentsPage(config)
                    ],
                    properties: {
                        page: {
                            pageNumbers: {
                                start: 1,
                                formatType: NumberFormat.LOWER_ROMAN,
                            },
                            margin: {
                                top: 1440,
                                right: 1440,
                                bottom: 1440,
                                left: 1440
                            }
                        },
                    },
                },

                // **SECTION 3: MAIN BODY & REFERENCES (Arabic Numerals 1, 2, 3...)**
                {
                    headers: { 
                        default: new Header({ 
                            children: [
                                new Paragraph({
                                    children: [
                                        new TextRun({
                                            text: config.projectTitle.toUpperCase(),
                                            bold: true,
                                            size: 20, // 10pt
                                            font: "Times New Roman"
                                        })
                                    ],
                                    alignment: AlignmentType.CENTER,
                                    spacing: { after: 120 }
                                })
                            ] 
                        }) 
                    },
                    footers: { default: createFooter() },
                    children: mainBodyContent,
                    properties: {
                        page: {
                            pageNumbers: {
                                start: 1,
                                formatType: NumberFormat.DECIMAL,
                            },
                            margin: {
                                top: 1440,
                                right: 1440,
                                bottom: 1440,
                                left: 1440
                            }
                        },
                    },
                },
            ],
            // Default styles for all sections
            styles: {
                default: {
                    document: {
                        run: {
                            size: 24, // 12pt
                            font: "Times New Roman",
                        },
                        paragraph: {
                            spacing: {
                                line: 360, // 1.5 line spacing
                            },
                        },
                    },
                },
            },
        });

        return await Packer.toBuffer(doc);

    } catch (error) {
        console.error('DOCX generation error:', error);
        throw new Error(`Failed to create DOCX: ${error.message}`);
    }
}